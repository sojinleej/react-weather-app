{"version":3,"sources":["Components/Spinner.js","Components/Current.js","Components/FiveDays.js","App.js","Components/Chart.js","index.js"],"names":["Spinner","props","react_default","a","createElement","className","message","defaultProps","withStyles","theme","root","width","marginTop","spacing","unit","overflowX","table","minWidth","_ref","current","date","rows","id","Object","keys","map","name","index","push","weatherSpec","city","country","weather","temp","Paper_default","Table_default","TableBody_default","row","TableRow_default","key","toString","TableCell_default","component","scope","align","FiveDays","cod","day","icon","Date","split","shift","apiKey","React","Component","apiURL","App","state","errorMessage","fiveDays","list","_this2","this","navigator","geolocation","getCurrentPosition","position","lat","coords","latitude","lon","longitude","getWeather","err","setState","location","_this3","console","log","fetch","then","response","json","data","sys","main","cloud","clouds","all","humidity","Math","round","wind","speed","pressure","sunrise","sunset","catch","arr","filter","item","dt_txt","_this4","src_Components_Current","slice","join","src_Components_FiveDays","dt","Components_Spinner","renderContent","ReactDOM","render","src_App_0","document","querySelector"],"mappings":"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","file":"static/js/main.b0787354.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Spinner = props => {\r\n\r\n    return (\r\n        <div className=\"ui active dimmer\">\r\n            <div className=\"ui big text loader\">{props.message}</div>\r\n        </div>\r\n    );\r\n};\r\n\r\nSpinner.defaultProps = {\r\n message: 'Loading...'   \r\n};\r\n\r\nexport default Spinner;","import React from 'react';\r\nimport './Current.css';\r\n// import PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\n// import Grid from '@material-ui/core/Grid';\r\n\r\n// ** remove or replace later\r\nconst styles = theme => ({\r\n    root: {\r\n        width: '100%',\r\n        marginTop: theme.spacing.unit * 3,\r\n        overflowX: 'auto',\r\n    },\r\n    table: {\r\n        minWidth: 700,\r\n    },\r\n});\r\n\r\n\r\n// fixed: Objects are not valid as a React child (found: object with keys {})\r\nconst Current = ({ current, date }) => {\r\n\r\n    // fixed: stored all the objects in one index \r\n    // fixed: {(intermediate value)}.map is not a function\r\n    // fixed: https://stackoverflow.com/questions/52498602/how-to-access-object-properties-of-key-object-reactjs\r\n\r\n    const rows = [];\r\n    let id = 0;\r\n    Object.keys(current).map((name, index) => {\r\n        if (index > 3) {\r\n            rows.push({ id: id++, name: name, weatherSpec: current[name] })\r\n        }\r\n    });\r\n    // console.log(rows); \r\n\r\n\r\n    return (\r\n        <div className='container'>\r\n            <div className='current-weather'>\r\n                {/* // ** add icon and current date */}\r\n                <div>\r\n                    <h3>{current.city}, {current.country}</h3>\r\n                    <p>{current.weather}</p>\r\n                </div>\r\n                <div>\r\n                    <h1>{current.temp} &deg;C</h1>\r\n                    <p>{date}</p>\r\n                </div>\r\n            </div>\r\n\r\n            <div className='current-specs'>\r\n                <Paper className=''>\r\n                    <Table className=''>\r\n                        <TableBody>\r\n                            {/* fixed: Warning: Each child in a list should have a unique \"key\" prop */}\r\n                            {rows.map((row, index) =>\r\n                                <TableRow key={row.id.toString()}>\r\n                                    <TableCell component=\"th\" scope=\"row\">\r\n                                        {row.name}\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        {row.weatherSpec}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            )}\r\n                        </TableBody>\r\n                    </Table>\r\n                </Paper>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n// fixed the export statement later\r\nexport default withStyles(styles)(Current);","import React from 'react';\r\n// import { withStyles } from '@material-ui/core/styles';\r\nimport './FiveDays.css';\r\n\r\n// ** modify later: const FiveDays = ({ cod, list }) => {\r\nconst FiveDays = ({ cod, day, icon, temp }) => {\r\n// const FiveDays = ({day}) => {\r\n\r\n    return (\r\n        <div className='day'>\r\n            <p id='day-name'>{new Date(day * 1000).toString().split(' ').shift()}</p>\r\n            <i className={'wi owm-' + icon}></i>\r\n            <p>{temp} &deg;C</p>\r\n            {/* <p>{day}</p> */}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default FiveDays;","import React from 'react';\r\n// import ReactDOM from 'react-dom';\r\nimport Spinner from './Components/Spinner';\r\nimport Current from './Components/Current';\r\nimport FiveDays from './Components/FiveDays';\r\nimport './App.css';\r\nimport Chart from './Components/Chart';\r\n\r\n// ** hide it later\r\nconst apiKey = 'c10073d20b78554fc8f196d1bdf2d89f';\r\n\r\nconst apiURL = 'https://api.openweathermap.org/data/2.5/';\r\n\r\nclass App extends React.Component {\r\n\r\n    state = {\r\n        date: new Date(),\r\n        current: '',\r\n        errorMessage: '',\r\n\r\n        // \r\n        fiveDays: {\r\n            cod: '',\r\n            list: []\r\n        }\r\n    };\r\n\r\n    componentDidMount() {\r\n        if (navigator.geolocation) {\r\n\r\n            // get the current position of the device\r\n            navigator.geolocation.getCurrentPosition(position => {\r\n                let lat = position.coords.latitude;\r\n                let lon = position.coords.longitude;\r\n                this.getWeather('lat=' + lat + '&lon=' + lon);\r\n            },\r\n                err => this.setState({ errorMessage: err.message })\r\n            )\r\n        }\r\n    }\r\n\r\n    getWeather(location) {\r\n        console.log(location);\r\n\r\n        // fetch data for Current weather\r\n        fetch(apiURL + 'weather?' + location + '&appid=' + apiKey + '&units=metric')\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                this.setState({\r\n                    // ** later, get the whole data into current and pass it as props to its child\r\n                    // ** eg. current: data or return data\r\n                    current: {\r\n                        country: data.sys.country,\r\n                        city: data.name,\r\n                        weather: data.weather[0].main,\r\n                        temp: data.main.temp,\r\n                        cloud: data.clouds.all,\r\n                        humidity: Math.round(data.main.humidity),\r\n                        wind: Math.round(data.wind.speed),\r\n                        pressure: Math.round(data.main.pressure),\r\n                        sunrise: data.sys.sunrise,\r\n                        sunset: data.sys.sunset\r\n                    }\r\n                })\r\n            })\r\n            .catch(err => {\r\n                // ** change the error msg\r\n                this.setState({ errorMessage: '' });\r\n            });\r\n\r\n        // fetch data for Five days\r\n        fetch(apiURL + 'forecast?' + location + '&appid=' + apiKey + '&units=metric')\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                let arr = data.list.filter(item => {\r\n                    // let time = new Date(item.dt * 1000);\r\n                    // console.log(time.getTimezoneOffset()); // 240\r\n\r\n                    let time = item.dt_txt.toString().split(' ')[1];\r\n\r\n                    // ** 계산식이 잘못된거 같다 다시 살펴보기\r\n                    /*if (time.getTimezoneOffset() === 360) {\r\n                        if (time.toString().split(' ')[4] === '15:00:00')\r\n                            return item;\r\n                    } else if (time.getTimezoneOffset() === 300) {\r\n\r\n                        if (time.toString().split(' ')[4] === '16:00:00')\r\n                            return item;\r\n                    }*/\r\n\r\n                    // ** change it later this is temporary\r\n                    if (time === '15:00:00') \r\n                        return item;\r\n\r\n                });\r\n\r\n                // console.log(data.list);\r\n                console.log(arr);\r\n\r\n                this.setState({\r\n                    fiveDays: {\r\n                        cod: data.cod,\r\n                        list: arr\r\n                    }\r\n                })\r\n                // console.log(this.state.fiveDays.list);\r\n            })\r\n            .catch(err => {\r\n                // ** change the error msg                \r\n                this.setState({ errorMessage: '' });\r\n            });\r\n    }\r\n\r\n    // \r\n    renderContent() {\r\n        if (this.state.errorMessage && !this.state.current) {\r\n            return <div>Error: {this.state.errorMessage}</div>;\r\n        }\r\n        if (!this.state.errorMessage && this.state.current) {\r\n            return (\r\n                <div className='container'>\r\n                    <Current\r\n                        current={this.state.current}\r\n                        date={this.state.date.toString().split(' ').slice(0, 3).join(' ')}\r\n                    />\r\n                    {/* <div className='lineChart'>\r\n                        <Chart />\r\n                    </div> */}\r\n                    <div className='week'>\r\n                        {this.state.fiveDays.list.map(day => (\r\n                            <FiveDays\r\n                                cod={this.state.fiveDays.cod}\r\n                                day={day.dt}\r\n                                icon={day.weather[0].icon}\r\n                                temp={Math.round(day.main.temp)}\r\n                            />\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        return <Spinner message=\"Plesae accept the location request\" />;\r\n    }\r\n\r\n    // \r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.renderContent()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","import React from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport { MDBContainer } from \"mdbreact\";\r\n\r\n\r\nclass Chart extends React.Component {\r\n    state = {\r\n        dataLine: {\r\n            labels: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\"],\r\n            datasets: [\r\n                {\r\n                    // label: \"Temperature\",\r\n                    // fill: true,\r\n                    // backgroundColor: \"rgba(75,192,192,0.4)\",\r\n                    // borderColor: \"rgba(75,192,192,1)\",\r\n                    // borderDash: [],\r\n                    // borderDashOffset: 0.0,\r\n                    // pointBorderWidth: 1,\r\n                    // pointHoverRadius: 5,\r\n                    // pointHoverBackgroundColor: \"rgba(75,192,192,1)\",\r\n                    // pointHoverBorderColor: \"rgba(220,220,220,1)\",\r\n                    // pointHoverBorderWidth: 2,\r\n                    // pointRadius: 1,\r\n                    // pointHitRadius: 10,\r\n                    // data: [65, 59, 80, 81, 56, 55, 40]\r\n                    //   borderJoinStyle: \"miter\",\r\n                    //   pointBorderColor: \"rgba(75,192,192,1)\",\r\n                    //   pointBackgroundColor: \"#fff\",\r\n                    //   borderCapStyle: \"butt\",\r\n                    //   lineTension: 0.1,\r\n                }\r\n            ]\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <MDBContainer>\r\n                {/* <h3 className=\"mt-5\">Line chart</h3> */}\r\n                <Line data={this.state.dataLine} options={{ responsive: true }} />\r\n            </MDBContainer>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Chart;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.querySelector('#root'));"],"sourceRoot":""}